---
{% import "macros.j2" as _etcd with context %}
apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  hostNetwork: true
  priorityClassName: system-node-critical
  containers:
    - name: kube-apiserver
      image: "{{hyperkube}}"
      command:
        - /hyperkube
        - apiserver
        - --bind-address=0.0.0.0
        - --etcd-servers={{_etcd.peers()}}
        - --apiserver-count={{groups['kubernetes-masters']|length}}
        - --allow-privileged=true
        - --service-cluster-ip-range={{kubernetes_service_addresses}}
        - --secure-port={{kube_apiserver_secure_port}}
        - --advertise-address={{ansible_default_ipv4.address}}
        - --feature-gates=PodPriority=true
        - --admission-control={{kube_admission_control}}
        - --runtime-config={{ kube_apiserver_runtime_config }}
{% if enable_external_admission_controller_webhook  or enable_aggregration_layer %}
        - --proxy-client-cert-file={{kube_cert_dir}}/client.pem
        - --proxy-client-key-file={{kube_cert_dir}}/client-key.pem
        - --requestheader-client-ca-file={{kube_cert_dir}}/client-ca.pem
{% endif %}
{% if enable_aggregration_layer %}
        - --requestheader-extra-headers-prefix=X-Remote-Extra-
        - --requestheader-group-headers=X-Remote-Group
        - --requestheader-username-headers=X-Remote-User
{% endif %}
        - --tls-cert-file={{kube_cert_dir}}/apiserver.pem
        - --tls-private-key-file={{kube_cert_dir}}/apiserver-key.pem
        - --client-ca-file={{kube_cert_dir}}/ca.pem
        - --service-account-key-file={{kube_cert_dir}}/apiserver-key.pem
        - --token-auth-file=/etc/auth/tokens.csv
        - --authorization-mode={{kube_authorization_mode}}
        - --authorization-policy-file=/etc/auth/policies.jsonl
        - --storage-backend={{kube_storage_backend}}
{% if kube_enable_audit_logs %}
        - --audit-policy-file={{kube_audit_policy_file}}
        - --audit-log-path={{kube_audit_log_path}}
        - --audit-log-maxsize={{kube_audit_log_maxsize}}
        - --audit-log-maxbackup={{kube_audit_log_maxbackup}}
        - --audit-log-format=json
{% endif %}
{% if kube_enable_cloud_provider %}
        - --cloud-config={{kube_cloud_config_path}}
        - --cloud-provider={{kube_cloud_provider}}
{% endif %}
        - --v={{kube_apiserver_verbosity}}
      resources:
        requests:
          cpu: {{kube_apiserver_requests_cpu}}
          memory: {{kube_apiserver_requests_memory}}
        limits:
          cpu: {{kube_apiserver_limits_cpu}}
          memory: {{kube_apiserver_limits_memory}}
      livenessProbe:
        httpGet:
          host: 127.0.0.1
          port: 8080
          path: /healthz
        initialDelaySeconds: 15
        timeoutSeconds: 15
        periodSeconds: 15
      ports:
        - containerPort: {{kube_apiserver_secure_port}}
          hostPort: {{kube_apiserver_secure_port}}
          name: https
        - containerPort: 8080
          hostPort: 8080
          name: local
      volumeMounts:
        - mountPath: {{kube_cert_dir}}
          name: ssl-certs-kubernetes
          readOnly: true
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
        - mountPath: /etc/auth
          name: auth-kubernetes
          readOnly: true
{% if kube_enable_audit_logs %}
        - mountPath: {{kube_audit_config_dir}}
          name: kube-audit
          readOnly: true
        - mountPath: {{var_log_dir}}/kube-audit
          subPath: kube-audit
          name: var-log
{% endif %}
{% if kube_enable_cloud_provider %}
        - mountPath: {{kube_cloud_config_path}}
          name: cloud-config
          readOnly: true
{% endif %}
  volumes:
    - hostPath:
        path: {{kube_cert_dir}}
      name: ssl-certs-kubernetes
    - hostPath:
        path: /usr/share/ca-certificates
      name: ssl-certs-host
    - hostPath:
        path: {{kube_auth_dir}}
      name: auth-kubernetes
{% if kube_enable_audit_logs %}
    - hostPath:
        path: {{kube_audit_config_dir}}
      name: kube-audit
    - hostPath:
        path: {{var_log_dir}}
      name: var-log
{% endif %}
{% if kube_enable_cloud_provider %}
    - hostPath:
        path: {{kube_cloud_config_path}}
        type: File
      name: cloud-config
{% endif %}
